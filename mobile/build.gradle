// Module :mobile
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.androidx.navigation.safeargs)
    // alias(libs.plugins.google.mobile.services)
    alias(libs.plugins.firebase.appdistribution)
    alias(libs.plugins.firebase.crashlytics)
}

// conditional remote dependency, when directory `buildSrc` is present.
if (new File(getRootDir().absolutePath + "/buildSrc").exists() || project.pluginManager.hasPlugin("io.syslogic.cloudkms")) {
    apply plugin: "io.syslogic.cloudkms"
}

android {
    namespace = "io.syslogic.cloudbuild"
    buildToolsVersion = "36.0.0"
    defaultConfig {
        applicationId = "io.syslogic.cloudbuild"
        minSdk = 23
        compileSdk = 36
        targetSdk = 36
        versionCode = 2
        versionName = "1.0.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testBuildType = "debug"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        dataBinding = false
        buildConfig = true
    }

    if (rootProject.file('keystore.properties').exists()) {
        signingConfigs {
            debug {
                storeFile rootProject.file(".android${File.separator}debug.keystore")
                storePassword rootProject.ext.get('debugKeystorePass')
                keyAlias rootProject.ext.get('debugKeyAlias')
                keyPassword rootProject.ext.get('debugKeyPass')
            }
            release {
                storeFile rootProject.file(".android${File.separator}release.keystore")
                storePassword rootProject.ext.get('releaseKeystorePass')
                keyAlias rootProject.ext.get('releaseKeyAlias')
                keyPassword rootProject.ext.get('releaseKeyPass')
            }
        }

        buildTypes {

            debug {
                signingConfig = signingConfigs.debug
                multiDexEnabled = true
            }

            release {
                signingConfig = signingConfigs.release
                multiDexEnabled = true

                firebaseAppDistribution {
                    serviceCredentialsFile = rootProject.file("credentials/google-service-account.json")
                    releaseNotesFile = rootProject.file("credentials/release_notes.txt")
                    testersFile = rootProject.file("credentials/testers.txt")
                }

                firebaseCrashlytics {
                    nativeSymbolUploadEnabled false
                    unstrippedNativeLibsDir "build/intermediates/merged_native_libs/release/out/lib/"
                    strippedNativeLibsDir "build/intermediates/stripped_native_libs/release/out/lib/"
                }
            }
        }
    }

    lint {
        lintConfig = project.file('lint.xml')
        checkAllWarnings = true
        warningsAsErrors = true
        abortOnError = false
        showAll = false
    }
}

base {
    archivesName = 'cloudbuild_' + android.defaultConfig.versionName
}

dependencies {
    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui

    implementation libs.firebase.crashlytics
    // implementation libs.firebase.crashlytics.ndk
    implementation libs.firebase.perf

    // jUnit
    testImplementation libs.junit

    // Required for connected tests.
    // https://mvnrepository.com/artifact/androidx.test/monitor
    debugImplementation libs.androidx.test.monitor

    // https://mvnrepository.com/artifact/androidx.test.ext
    androidTestImplementation libs.androidx.test.junit

    // https://mvnrepository.com/artifact/androidx.test
    // https://developer.android.com/jetpack/androidx/releases/test
    androidTestImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.runner

    // https://mvnrepository.com/artifact/androidx.test.espresso
    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.androidx.test.espresso.idling.res
    androidTestImplementation libs.androidx.test.espresso.contrib
    androidTestImplementation libs.androidx.test.espresso.intents
    androidTestImplementation libs.androidx.test.espresso.web

    // https://mvnrepository.com/artifact/androidx.test.uiautomator/uiautomator
    androidTestImplementation libs.androidx.test.uiautomator
}

/** Google Play Services */
if (project.file('google-services.json').exists()) {
    apply plugin: "com.google.gms.google-services"
} else {
    logger.error('> File google-services.json is missing.')
}

/** Google Cloud KMS */
if (project.getPluginManager().hasPlugin("io.syslogic.cloudkms")) {
    if (System.getenv('_CLOUD_KMS_KEY_PATH') == null) {
        logger.error('> Variable _CLOUD_KMS_KEY_PATH not set.')
    } else {
        logger.error('> _CLOUD_KMS_KEY_PATH: ' + System.getenv('_CLOUD_KMS_KEY_PATH'))
        cloudKms {

            // The leading underscore is required due to the CloudBuild environment.
            kmsKeyPath = System.getenv('_CLOUD_KMS_KEY_PATH')

            plaintextFiles = [
                    /* 0 */ rootProject.file(".android${File.separator}debug.keystore").path,
                    /* 1 */ rootProject.file(".android${File.separator}release.keystore").path
            ]

            ciphertextFiles = [
                    /* 0 */ getRootDir().absolutePath + File.separator + 'credentials/debug.keystore.enc',
                    /* 1 */ getRootDir().absolutePath + File.separator + 'credentials/release.keystore.enc'
            ]
        }
    }
}
